#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Thêm đoạn này để khởi tạo Socket.IO
const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: [process.env.WEB_ORIGIN || "http://localhost:3000"],
    credentials: true,
    methods: ["GET", "POST"],
  },
  pingTimeout: 30000,
});

// Lưu userId <-> socketId
const userSockets = {};

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  // Nhận userId từ client sau khi đăng nhập
  socket.on("register", (userId) => {
    userSockets[userId] = socket.id;
    socket.userId = userId;
    // Join phòng riêng
    socket.join(`user:${userId}`);
  });

  const { ThreadParticipant } = require("../models");

  socket.on("send_message", async (data) => {
    // data: { threadId, content }
    const { threadId, content } = data;
    if (!threadId || !content) return;

    // Lấy tất cả thành viên của thread (nhóm hoặc 1-1)
    const participants = await ThreadParticipant.findAll({
      where: { thread_id: threadId },
      attributes: ["user_id"],
    });

    // Log gửi tin nhắn nhóm
    console.log(
      `User ${socket.userId} gửi: "${content}" vào thread ${threadId} cho các user:`,
      participants.map((tp) => tp.user_id)
    );

    // Emit cho tất cả thành viên
    participants.forEach((tp) => {
      io.to(`user:${tp.user_id}`).emit("receive_message", {
        threadId,
        content,
        sender_id: socket.userId,
        created_at: new Date().toISOString(),
      });
    });
  });

  // Xử lý signaling cho video call
  socket.on("video_offer", async ({ threadId, offer }) => {
    const { ThreadParticipant } = require("../models");
    const participants = await ThreadParticipant.findAll({
      where: { thread_id: threadId },
      attributes: ["user_id"],
    });

    participants.forEach((tp) => {
      if (tp.user_id !== socket.userId) {
        io.to(`user:${tp.user_id}`).emit("video_offer", {
          threadId,
          offer,
          fromUserId: socket.userId,
        });
      }
    });
    console.log(
      `video_offer from ${socket.userId} gửi tới thread ${threadId} cho các user:`,
      participants.map((tp) => tp.user_id)
    );
  });

  socket.on("video_answer", async ({ threadId, answer }) => {
    const { ThreadParticipant } = require("../models");
    const participants = await ThreadParticipant.findAll({
      where: { thread_id: threadId },
      attributes: ["user_id"],
    });

    participants.forEach((tp) => {
      if (tp.user_id !== socket.userId) {
        io.to(`user:${tp.user_id}`).emit("video_answer", {
          threadId,
          answer,
          fromUserId: socket.userId,
        });
      }
    });
    console.log(
      `video_answer from ${socket.userId} gửi tới thread ${threadId} cho các user:`,
      participants.map((tp) => tp.user_id)
    );
  });

  socket.on("video_ice_candidate", async ({ threadId, candidate }) => {
    const { ThreadParticipant } = require("../models");
    const participants = await ThreadParticipant.findAll({
      where: { thread_id: threadId },
      attributes: ["user_id"],
    });

    participants.forEach((tp) => {
      if (tp.user_id !== socket.userId) {
        io.to(`user:${tp.user_id}`).emit("video_ice_candidate", {
          threadId,
          candidate,
          fromUserId: socket.userId,
        });
      }
    });
    console.log(
      `video_ice_candidate from ${socket.userId} gửi tới thread ${threadId} cho các user:`,
      participants.map((tp) => tp.user_id)
    );
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    if (socket.userId) {
      delete userSockets[socket.userId];
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
